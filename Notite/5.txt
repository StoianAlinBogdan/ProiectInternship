	SQL este un limbaj de programare declarativ. Noi descriem doar ce am dori sa obtinem, fara a oferi detalii despre cum se obtine rezultatul. Un limbaj de programare imperativ nu functioneaza pe principiul asta; necesita implementarea explicita a felului de realizare a scopului dorit.
Totusi, utilizarea exclusiva a paradigmei declarative este limitatoare pentru SQL. Noi, ca DE, trebuie sa intelegem felul in care functioneaza baza de date in spate, cu regulile ei.
	Fazele de executie a unui query:
	- faza de parsare si pregatire;
	- faza de executie;
	- faza de fetch;
	Faza de parse: reprezinta o verificare a sintaxei (daca query-ul este corect). Aceasta faza se face imediat dupa ce se da submit la un query. Dupa asta, se face o verificare semantica. Un query poate sa fie corect gramatical, dar de ex. un obiect referentiat in query poate sa nu existe sau poate sa fie ceva neasteptat (o tabela unde se asteapta o valoare sau o valoare unde se astepta un view). Dupa aceasta, urmeaza generarea planului de executie. Planul de executie este un raport cu pasii care trebuiesc urmati de SQL engine pentru a returna rezultatul dorit de utilizator. Datele de intrare pentru faza de parsare si pregatire sunt: query-ul in sine; metadatele; si varii statistici de optimizare despre baza de date. 
	Faza de executie: Planul de executie este rulat; se fac toate operatiile descrise de catre planul de executie. Se verifica daca datele cerute exista deja in memorie, iar daca nu, se extrag de pe disc. Pe deasupra, daca se face un update / delete, engine-ul trebuie sa faca niste operatii pentru asigurarea consistentei datelor. 
	Faza de fetch: rezultatele rularii planului de executie sunt intoarse la utilizator.  Rezultatul propriu zis este un cursor (pointer) la o adresa de memorie unde se afla datele cerute. 

	Planul de executie: un set ordonat de pasi (noduri) care trebuiesc urmati. Un plan de executie in format text se citeste de la cel mai nested nod la cel mai putin nested, in ordine de sus in jos. In postgres, se poate obtine un execution plan folosind EXPLAIN in fata query-ului, care testeaza fara a executa query-ul, sau EXPLAIN ANALYZE, care si executa practic query-ul. 
Legenda: -> - nod intermediar sau frunza. "Index Only Scan"/"Index Scan"/etc. - access method. "film pkey on film" - obiectul accesat. "Nested Loop" - join method. "Index Cond..." - join condition. "Filter: ..." - filter condition. Primul "rows=.." - estimated number of rows. Al doilea "rows=..." - actual number of rows. "Actual time...x..y" - x - actual time to retrieve first row only; y - actual time to build / retrieve the entire result set. Planning time / Execution time - self-explanatory.

		Recap
	Sequential Scan - se citeste tabela de la un capat la altul, fara a utiliza un index; este metoda de accesare default. Este cea mai eficienta metoda de a selecta daca se selecteaza mai mult de aprox. 20% din randurile unui tabel.
	Parallel sequential scan - un sequential scan care este rulat pe mai multe fire de executie utilizand niste workeri la nivelul sistemului de operare; dupa scan-ul workerilor, se face o grupare a rezultatelor ambelor workeri.
	Index scan - se acceseaza nodurile din index, de unde se afla adresa randului de unde se va accesa data necesara.
	Index only scan - metoda de acces in care un query nu necesita decat scanarea unui index (cum ar fi in cazul accesarii unei singure coloane a unui rand), pentru ca nu mai trebuie sa trecem si in tabel pentru citirea datelor.
	Bitmap index scan - in momentul in care se selecteaza pe un numar de randuri mai putin decat ar fi justificat un sequential scan, dar nici un index scan nu ar fi optim, exista optimizare folosind un bitmap; se face o lista cu blocurile unde apar valorile cautate, dupa care se merge in tabel si se selecteaza (se aduc in memorie) acele blocuri. Acele blocuri pot contine totusi si randuri care se refera la alte valori, iar din cauza acestora se face un recheck.
	Multiple bitmap index scan - in cazul in care sunt mai multi indecsi pe acelasi tabel in conditiile de where, se face un array cu blocurile care sunt accesate din primul index; se face un array cu paginile care sunt accesate din al doilea index si in functie de operatorul dintre ele (daca e AND sau OR), se face o suprapunere a paginilor si se obtine lista finala cu toate blocurile (paginile) care se potrivesc cu conditiile date. Si aici exista o etapa de recheck la sfarsit, din aceleasi motive ca mai sus.
	Exista si Tuple sau ROWID scan, dar este un proces automat.
	Toate aceste metode de acces sunt necesare pentru nodurile primare (frunze).
	
	Metode de acces pentru noduri intermediare:
	Nested Loops Join - metoda default de a face join intre doua seturi de date. Necesita doua noduri ca input, este singura metoda posibila (in postgres) care poate sa acomodeze toate tipurile de joinuri din SQL si toate tipurile de operatori din join (=, <, >, etc.). Celelalte tipuri de join opereaza cam strict pe operator de join "=". Este echivalent cu un "for" loop din programarea normala. 
	Hash join - se face o optimizare pentru a face join intre doua seturi de date. Poate lucra doar cu "=", tinde sa fie mai rapid decat nested loop, dar are nevoie de mai multa memorie, iar daca nu exista suficienta memorie, cateodata se scrie in temp table space (pe disk), iar din cauza asta apar probleme de performanta. Hash join-ul este de obicei folosit pentru situatiile in care seturile de date sunt mari.
	Merge join - cea mai rapida metoda de join pentru nod-uri de input foarte mari, dar necesita ca datele sa fie sortate in prealabil. Indecsii sunt deja sortati, iar daca seturile de date au deja indecsi pe conditiile de join, este foarte util de folosit un merge join.

	Alte operatii din execution plan:
	Sort (order by) - daca metoda de acces este un seq scan, trebuie aplicata o operatie de Sort (daca exista un order by in query). Sortarea poate aparea si automat daca engine-ul considera ca ar fi mult mai optim un merge join pentru join-ul curent, care necesita sortare.  Daca nu exista destula memorie pentru sortarea intregului set de date de intrare, se foloseste disk-ul, care e foarte foarte incet. 
	Unique (distinct sau union) - 






Comenzi rulate la sfarsit:
create table myTable as SELECT level id, 'randuri' || to_char(level) as randuri, sysdate + level as data FROM dual connect by level < 10000;

select * from myTable;

create index ix_id on myTable(id);


select * from all_tables where table_name=upper('myTable');

select * from all_tab_columns where table_name=upper('myTable');


BEGIN
    dbms_stats.gather_table_stats('SYS', 'MYTABLE');
END;


explain plan for select * from myTable where id > 9000;

select * from table(dbms_xplan.display());


select * from myTable where id > 9000;

select * from table(dbms_xplan.display_cursor());

select * from table(dbms_xplan.display_awr('738a0r0utp4wv'));

ALTER SESSION SET EVENTS '10046 trace name context forever, level 12';

SELECT value
FROM   v$diag_info
WHERE  name = 'Default Trace File';


	
sql id 8swypbbr0m372
	